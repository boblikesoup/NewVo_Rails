################################## Token Stuff ##############################################################

# newvo_token- Brent (local)
67lpujuyKv7jcJpj4x8iYJWKTDta5NwU

# newvo_token- Gao (heroku)
pDIMHb7DTRzK9dWzQUhuRHCxJevNiolT

# Amazon Information
Amazon accessâ€” AKIAIFO4WUGAG7WBKHOA
Amazon secret-- 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

# App Facebook Access Token
access_token=650360678349775|4AMi2eAfkGTyVd-t2SrWduEGfAU

################################## API fixing etc.. #########################################################

ACTIVITY FEED--
http://localhost:3000/api/v1/activity_feed?newvo_token=67lpujuyKv7jcJpj4x8iYJWKTDta5NwU
https://newvo.herokuapp.com/api/v1/activity_feed?newvo_token=pDIMHb7DTRzK9dWzQUhuRHCxJevNiolT

VOTES-- create
https://newvo.herokuapp.com/api/v1/votes?newvo_token=pDIMHb7DTRzK9dWzQUhuRHCxJevNiolT&photo=213&value=1
localhost:3000/api/v1/votes?newvo_token=67lpujuyKv7jcJpj4x8iYJWKTDta5NwU&photo=1&value=1

FOLLOWINGS-- create
https://newvo.herokuapp.com/api/v1/followings?newvo_token=pDIMHb7DTRzK9dWzQUhuRHCxJevNiolT&followed_id=4
http://localhost:3000/api/v1/followings?newvo_token=67lpujuyKv7jcJpj4x8iYJWKTDta5NwU&followed_id=2

GROUPS-- create
https://newvo.herokuapp.com/api/v1/groups?user_id[]=1&user_id[]=2&user_id[]=3&user_id[]=4&newvo_token=pDIMHb7DTRzK9dWzQUhuRHCxJevNiolT&creator_id=6&title=cools group

USER-- update description
https://newvo.herokuapp.com/api/v1/users/describe?newvo_token=pDIMHb7DTRzK9dWzQUhuRHCxJevNiolT&description=this is new as fuck and it's a description

SESSIONS-- create
https://newvo.herokuapp.com/auth/mobile?fbtoken=CAACEdEose0cBAAZAkj94W40FXo4ZCeZCZAcaMSnNdyrqyo1uTjboxTSwdHRZBlClYLIZAPuLROh6UZCYzzW1QPg9NBvxSweIhuWt2IJrn1wKVNTZASIEkdhclCZBkWFU0q9Frhj5UVYZANyZCm8gf5rNMJPXsHenvfGAp2CrJh3jsJLwLjKUOsTVNLClMuDfYLXaXYZD&device_id=device_id&time_zone=+0800&os_type=ios

COMMENTS-- create
https://newvo.herokuapp.com/api/v1/posts/3/comments?newvo_token=OLmeNSbGdgtZEr4nBnRZSYvgc7Hi1hHH&body=fuckeverythingman

POSTS-- search
https://newvo.herokuapp.com/api/v1/posts/search/?newvo_token=OLmeNSbGdgtZEr4nBnRZSYvgc7Hi1hHH&used_post_ids=[1,2]&query=global
http://localhost:3000/api/v1/posts/search/?newvo_token=67lpujuyKv7jcJpj4x8iYJWKTDta5NwU&used_post_ids=[19,20,21]&query=global

############################################ Notes on Shoulda Matchers #######################################

# Thoughtbot is brilliant:
https://github.com/thoughtbot/shoulda-matchers

# Can use regex in validations!!!!
class UserProfile < ActiveRecord::Base
  validates_format_of :website_url, with: URI.regexp
end

Rspec:
it { should allow_value('http://foo.com', 'http://bar.com/baz').for(:website_url) }
it { should_not allow_value('asdfjkl').for(:website_url) }

# Can also use ensures_inclusion_of in validations!!!!
    validates_inclusion_of :severity,
    in: %w(low medium high),
    message: 'Severity must be low, medium, or high'

  Rspec:
  it do
    should ensure_inclusion_of(:severity).
    in_array(%w(low medium high)).
    with_message('Severity must be low, medium, or high')
  end

# Can also validate length!!!!
validates_length_of :bio, minimum: 15

validates_length_of :secret_key, in: 15..100,
    too_short: 'Secret key must be more than 15 characters',
    too_long: 'Secret key cannot be more than 100 characters'

Rspec:
it { should ensure_length_of(:bio).is_at_least(15) }
it do
    should ensure_length_of(:secret_key).
      is_at_least(15).
      is_at_most(100).
      with_short_message('Secret key must be more than 15 characters').
      with_long_message('Secret key cannot be more than 100 characters')
  end

# Can also validate the acceptance of shit
    validates_acceptance_of :terms_of_service,
    message: 'You must accept the terms of service'

    Rspec:
    it do
    should validate_acceptance_of(:terms_of_service).
      with_message('You must accept the terms of service')
  end

# Can validate confirmation
validates_confirmation_of :email

Rspec:
  it do
    should validate_confirmation_of(:email)
  end

# The width and breadth of has_many associations in rspec (examples)
  it { should have_many(:friends) }
  it { should have_many(:acquaintances).through(:friends) }
  it { should have_many(:job_offers).through(:friends).source(:opportunities) }
  it { should have_many(:coins).conditions(condition: 'mint') }
  it { should have_many(:shirts).order('color') }
  it { should have_many(:hopes).class_name('Dream') }
  it { should have_many(:worries).with_foreign_key('worrier_id') }
  it { should have_many(:ideas).validate(false) }
  it { should have_many(:distractions).counter_cache(true) }
  it { should have_many(:topics_of_interest).touch(true) }
  it { should have_many(:secret_documents).dependent(:destroy) }

# Render Matchers
describe PostsController do
  describe 'GET #show' do
    before { get :show }

    it { should render_template('show') }
  end
end

# Rescue matchers
describe ApplicationController do
  it do
    should rescue_from(ActiveRecord::RecordNotFound).
      with(:handle_not_found)
  end
end

############################################ Testing Notes Aaron: ##########################################

# attributes_for method generates a hash of attributes instead of a ruby object
# record.reload variables must be reloaded from the database, attributes won't update unless

require 'spec_helper'

describe Api::V1::EmployeesController do
  # makes variable available to each test case
  let(:auth_token) { "sYiHGuxbznOwqPuQrMR2tA"}
  # Setting up HTTP headers for environment
  before  :each do
    request.env["HTTP_ACCEPT"] = 'application/json'
    request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(auth_token)
  end

  describe "GET #show" do
    # factory girl, override
    let(:user) { create(:user, auth_token: auth_token )}
    it "assigns employee" do
      json = {id: user.employee.id, auth_token: auth_token }
      get :show, json

      # assigns is a hash containing all variables in request
      expect(assigns(:employee)).to eq user.employee
    end


    it "renders :show json" do
      json = {id: user.employee.id, auth_token: auth_token }
      get :show, json

      expect(response).to render_template :show
    end
  end

  describe "PATCH #update" do
    before :each do
      @employee = create(:employee, first_name: 'Lawrence', last_name: 'Smith')
      @user = create(:user, auth_token: auth_token, employee: @employee )
    end

    context "with valid attributes" do
      it "locates requested employee" do
        json = { id: @employee.id, employee: attributes_for(:employee, first_name: "Larry", last_name: "Smith"), auth_token: auth_token }
        patch :update, json
        expect(assigns(:current_employee)).to eq @employee
      end
      it "changes employees attributes" do
        json = { id: @employee.id, employee: attributes_for(:employee, first_name: "Larry", last_name: "Smith"), auth_token: auth_token }
        patch :update, json
        @employee.reload
        expect(@employee.first_name).to eq "Larry"
        expect(@employee.last_name).to eq "Smith"
      end
      it "responds with JSON success" do
        json = { id: @employee.id, employee: attributes_for(:employee, first_name: "Larry", last_name: "Smith"), auth_token: auth_token }
        patch :update, json
        expect(response.status).to eq(200)
        expect(JSON.parse(response.body)["success"]).to eq("true")
      end
    end
    context "with invalid attributes" do
      it "does not change employees attributes" do
        json = { id: @employee.id, employee: attributes_for(:employee, first_name: "Larry", last_name: nil), auth_token: auth_token }
        patch :update, json
        @employee.reload
        expect(@employee.first_name).to_not eq("Larry")
        expect(@employee.last_name).to eq("Smith")
      end
      it "responds with JSON errors" do
        json = { id: @employee.id, employee: attributes_for(:employee, first_name: "Larry", last_name: nil), auth_token: auth_token }
        patch :update, json
        expect(JSON.parse(response.body)["last_name"]).to eq(["can't be blank"])
      end
      it "responds with 400 status" do
        json = { id: @employee.id, employee: attributes_for(:employee, first_name: "Larry", last_name: nil), auth_token: auth_token }
        patch :update, json
        expect(response.status).to eq(400)
      end
    end
  end
end

######################################### to comment on comments ##########################################

    #   current_comment = Comment.find(params[:comment])
    #   vote = Vote.new(user_id: current_user.id, value: params[:value], post_id: current_photo.post.id)
    #   post = Post.find(current_comment.post_id)
    #   current_comment.votes << vote

################################################## end ####################################################

